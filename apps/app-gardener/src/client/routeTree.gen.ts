/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as IndexImport } from "./routes/index"
import { Route as ClustersIndexImport } from "./routes/clusters/index"
import { Route as ClustersClusterNameImport } from "./routes/clusters/$clusterName"

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any)

const ClustersIndexRoute = ClustersIndexImport.update({
  id: "/clusters/",
  path: "/clusters/",
  getParentRoute: () => rootRoute,
} as any)

const ClustersClusterNameRoute = ClustersClusterNameImport.update({
  id: "/clusters/$clusterName",
  path: "/clusters/$clusterName",
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/clusters/$clusterName": {
      id: "/clusters/$clusterName"
      path: "/clusters/$clusterName"
      fullPath: "/clusters/$clusterName"
      preLoaderRoute: typeof ClustersClusterNameImport
      parentRoute: typeof rootRoute
    }
    "/clusters/": {
      id: "/clusters/"
      path: "/clusters"
      fullPath: "/clusters"
      preLoaderRoute: typeof ClustersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/clusters/$clusterName": typeof ClustersClusterNameRoute
  "/clusters": typeof ClustersIndexRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/clusters/$clusterName": typeof ClustersClusterNameRoute
  "/clusters": typeof ClustersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/clusters/$clusterName": typeof ClustersClusterNameRoute
  "/clusters/": typeof ClustersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/clusters/$clusterName" | "/clusters"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/clusters/$clusterName" | "/clusters"
  id: "__root__" | "/" | "/clusters/$clusterName" | "/clusters/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ClustersClusterNameRoute: typeof ClustersClusterNameRoute
  ClustersIndexRoute: typeof ClustersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ClustersClusterNameRoute: ClustersClusterNameRoute,
  ClustersIndexRoute: ClustersIndexRoute,
}

export const routeTree = rootRoute._addFileChildren(rootRouteChildren)._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/clusters/$clusterName",
        "/clusters/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/clusters/$clusterName": {
      "filePath": "clusters/$clusterName.tsx"
    },
    "/clusters/": {
      "filePath": "clusters/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
