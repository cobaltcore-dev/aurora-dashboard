name: CI Check Title

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize
      - reopened

jobs:
  title-lint:
    name: Validate PR title
    runs-on: ubuntu-latest
    outputs:
      types: ${{ steps.load_config.outputs.types }}  # Job output for types file
      scopes: ${{ steps.load_config.outputs.scopes }}  # Job output for scopes file

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load config
        id: load_config
        run: |
          node -e "
            const config = require('./.github/commit-config.js');
            const types = config.types;  // Access the 'types' array
            const scopes = config.scopes;  // Access the 'scopes' array
            const fs = require('fs');
            fs.writeFileSync('types.txt', types.join('\n'));  // Write types to a file, each item on a new line
            fs.writeFileSync('scopes.txt', scopes.join('\n'));  // Write scopes to a file, each item on a new line
          "
          echo "File created at: $PWD/types.txt and: $PWD/scopes.txt"
          echo "::set-output name=types::$PWD/types.txt"  # Set the types as output
          echo "::set-output name=scopes::$PWD/scopes.txt"  # Set the scopes as output

      - name: TEST
        run: |
          echo "======================="
          cat ${{ steps.load_config.outputs.types }}  
          echo "::::::::::::::::::::::::"  
          cat ${{ steps.load_config.outputs.scopes }}    

      - name: CI Check Title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          wip: true
          # Configure which types are allowed (newline-delimited).
          # Default: https://github.com/commitizen/conventional-commit-types
          types: ${{ needs.load_config.outputs.types }}  # Pass the types extracted earlier
          scopes: ${{ needs.load_config.outputs.scopes }}  # Pass the scopes extracted earlier

          # Configure that a scope must always be provided.
          requireScope: true
          # Configure which scopes are disallowed in PR titles (newline-delimited).
          # For instance by setting the value below, `chore(release): ...` (lowercase)
          # and `ci(e2e,release): ...` (unknown scope) will be rejected.
          # These are regex patterns auto-wrapped in `^ $`.
          disallowScopes: |
            release
            [A-Z]+
          # Configure additional validation for the subject based on a regex.
          # This example ensures the subject doesn't start with an uppercase character.
          subjectPattern: ^(?![A-Z]).+$
          # If `subjectPattern` is configured, you can use this property to override
          # the default error message that is shown when the pattern doesn't match.
          # The variables `subject` and `title` can be used within the message.
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.
          # If the PR contains one of these newline-delimited labels, the
          # validation is skipped. If you want to rerun the validation when
          # labels change, you might want to use the `labeled` and `unlabeled`
          # event triggers in your workflow.
          ignoreLabels: |
            bot
            ignore-semantic-pull-request
          # If you're using a format for the PR title that differs from the traditional Conventional
          # Commits spec, you can use these options to customize the parsing of the type, scope and
          # subject. The `headerPattern` should contain a regex where the capturing groups in parentheses
          # correspond to the parts listed in `headerPatternCorrespondence`.
          # See: https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-commits-parser#headerpattern
          headerPattern: '^(\w*)(?:\(([\w$.\-*/ ]*)\))?: (.*)$'
          headerPatternCorrespondence: type, scope, subject
